workspace(name = "test_workspace")

# Set up maven
local_repository(
    name = "maven_repository_rules",
    path = "../..",
)

load("@maven_repository_rules//maven:maven.bzl", "maven_repository_specification")
load(
    ":build_substitution_templates.bzl",
    "AUTO_VALUE_BUILD_SNIPPET_WITH_PLUGIN",
    "DAGGER_BUILD_SNIPPET_WITH_PLUGIN",
)
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "build_bazel_rules_android",
    sha256 = "cd06d15dd8bb59926e4d65f9003bfc20f9da4b2519985c27e190cddc8b7a7806",
    strip_prefix = "rules_android-0.1.1",
    urls = ["https://github.com/bazelbuild/rules_android/archive/v0.1.1.zip"],
)

KOTLIN_VERSION = "1.3.71"

KOTLINC_RELEASE_SHA = "7adb77dad99c6d2f7bde9f8bafe4c6244a04587a8e36e62b074d00eda9f8e74a"

KOTLINC_RELEASE_URL = "https://github.com/JetBrains/kotlin/releases/download/v{v}/kotlin-compiler-{v}.zip".format(v = KOTLIN_VERSION)

KOTLIN_RULES_VERSION = "legacy-1.4.0-rc3"

KOTLIN_RULES_SHA = "da0e6e1543fcc79e93d4d93c3333378f3bd5d29e82c1bc2518de0dbe048e6598"

KOTLIN_RULES_URL = "https://github.com/bazelbuild/rules_kotlin/releases/download/%s/rules_kotlin_release.tgz" % KOTLIN_RULES_VERSION

http_archive(
    name = "io_bazel_rules_kotlin",
    sha256 = KOTLIN_RULES_SHA,
    urls = [KOTLIN_RULES_URL],
)

load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", "kotlin_repositories", "kt_register_toolchains")

kotlin_repositories(compiler_release = {
    "urls": [KOTLINC_RELEASE_URL],
    "sha256": KOTLINC_RELEASE_SHA,
})

register_toolchains("//:kotlin_toolchain")

maven_repository_specification(
    name = "maven",
    artifacts = {
        # This is the proper way to specify an artifact.  It contains the artifact, plus a configuration dictionary.
        # The config dictionary contains a sha256 hash. This both ensures the file downloaded is the expected one, but
        # also caches the file in bazel's "content addressable" cache, which survives build clean.
        "com.google.guava:guava:25.0-jre": {
            "sha256": "3fd4341776428c7e0e5c18a7c10de129475b69ab9d30aeafbb5c277bb6074fa9",
        },
        "com.google.dagger:dagger:2.20": {
            "sha256": "d37a556d8d57e2428c20e222b95346512d11fcf2174d581489a69a1439b886fb",
            "build_snippet": DAGGER_BUILD_SNIPPET_WITH_PLUGIN,
        },
        # This is how you specify an artifact that has no hash.  You must either supply a sha256 hash of the jar file
        # or specify that the dep is insecure.
        "com.google.dagger:dagger-compiler:2.20": {"insecure": True},
        "com.google.dagger:dagger-producers:2.20": {"insecure": True},
        "com.google.dagger:dagger-spi:2.20": {"insecure": True},
        "com.google.code.findbugs:jsr305:3.0.2": {"insecure": True},
        "com.google.errorprone:javac-shaded:9+181-r4173-1": {"insecure": True},
        "com.google.googlejavaformat:google-java-format:1.6": {"insecure": True},
        "com.google.truth:truth:0.42": {
            "insecure": True,
            "testonly": True,
        },
        "com.squareup:javapoet:1.11.1": {"insecure": True},
        "io.reactivex.rxjava2:rxjava:2.2.6": {"insecure": True},
        "org.reactivestreams:reactive-streams:1.0.2": {"insecure": True},
        "org.checkerframework:checker-compat-qual:2.5.5": {"insecure": True},
        "javax.annotation:jsr250-api:1.0": {"insecure": True},
        "javax.inject:javax.inject:1": {"insecure": True},
        "junit:junit:4.13": {
            "insecure": True,
            "testonly": True,
            "exclude": ["org.hamcrest:hamcrest-core"],
        },
        "com.google.errorprone:error_prone_annotations:2.1.3": {"insecure": True},
        "com.google.j2objc:j2objc-annotations:1.1": {"insecure": True},
        "org.codehaus.mojo:animal-sniffer-annotations:1.14": {"insecure": True},
        "org.jetbrains:annotations:13.0": {"insecure": True},
        "org.jetbrains.kotlin:kotlin-test:%s" % KOTLIN_VERSION: {"insecure": True},
        "org.jetbrains.kotlin:kotlin-test-common:%s" % KOTLIN_VERSION: {"insecure": True},
        "org.jetbrains.kotlin:kotlin-stdlib:%s" % KOTLIN_VERSION: {"insecure": True},
        "org.jetbrains.kotlin:kotlin-stdlib-common:%s" % KOTLIN_VERSION: {"insecure": True},
        "com.android.tools.build:builder-model:2.3.0": {"insecure": True},  # tests regression #38
        "com.android.tools:annotations:25.3.0": {"insecure": True},
        "javax.annotation:javax.annotation-api:1.2": {"insecure": True},  # tests regression #40
        "org.checkerframework:checker-qual:2.5.3": {"insecure": True},
        "com.googlecode.java-diff-utils:diffutils:1.3.0": {"insecure": True},
        "com.google.auto.value:auto-value-annotations:1.6.3": {"insecure": True},
        "com.google.auto.value:auto-value:1.6.3": {
            "insecure": True,
            "build_snippet": AUTO_VALUE_BUILD_SNIPPET_WITH_PLUGIN,
        },
        "com.google.android.material:material:1.0.0": {"insecure": True},
        "androidx.annotation:annotation:1.1.0": {"insecure": True},
        "androidx.cardview:cardview:1.0.0": {"insecure": True},
        "androidx.core:core:1.1.0": {"insecure": True},
        "androidx.lifecycle:lifecycle-runtime:2.0.0": {"insecure": True},
        "androidx.recyclerview:recyclerview:1.1.0": {"insecure": True},
        "androidx.versionedparcelable:versionedparcelable:1.1.0": {"insecure": True},
        "androidx.collection:collection:1.0.0": {"insecure": True},
        "androidx.lifecycle:lifecycle-common:2.0.0": {"insecure": True},
        "androidx.arch.core:core-common:2.0.0": {"insecure": True},
        "androidx.transition:transition:1.0.0": {"insecure": True},
        "androidx.fragment:fragment:1.0.0": {"insecure": True},
        "androidx.legacy:legacy-support-core-utils:1.0.0": {"insecure": True},
        "androidx.legacy:legacy-support-core-ui:1.0.0": {"insecure": True},
        "androidx.customview:customview:1.0.0": {"insecure": True},
        "androidx.appcompat:appcompat:1.0.0": {"insecure": True},
        "androidx.slidingpanelayout:slidingpanelayout:1.0.0": {"insecure": True},
        "androidx.drawerlayout:drawerlayout:1.0.0": {"insecure": True},
        "androidx.vectordrawable:vectordrawable:1.0.0": {"insecure": True},
        "androidx.print:print:1.0.0": {"insecure": True},
        "androidx.cursoradapter:cursoradapter:1.0.0": {"insecure": True},
        "androidx.vectordrawable:vectordrawable-animated:1.0.0": {"insecure": True},
        "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0": {"insecure": True},
        "androidx.loader:loader:1.0.0": {"insecure": True},
        "androidx.viewpager:viewpager:1.0.0": {"insecure": True},
        "androidx.documentfile:documentfile:1.0.0": {"insecure": True},
        "androidx.lifecycle:lifecycle-viewmodel:2.0.0": {"insecure": True},
        "androidx.interpolator:interpolator:1.0.0": {"insecure": True},
        "androidx.localbroadcastmanager:localbroadcastmanager:1.0.0": {"insecure": True},
        "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0": {"insecure": True},
        "androidx.coordinatorlayout:coordinatorlayout:1.0.0": {"insecure": True},
        "androidx.lifecycle:lifecycle-livedata:2.0.0": {"insecure": True},
        "androidx.arch.core:core-runtime:2.0.0": {"insecure": True},
        "androidx.lifecycle:lifecycle-livedata-core:2.0.0": {"insecure": True},

        # Helpshift does not specify its deps, and so cannot do resource merging without the
        # additional dependencies listed in its "getting started" docs. This could be solved with
        # a build_snippet, but aar snippets are complicated, so using `deps` or `include` makes it
        # easier.
        "com.helpshift:android-helpshift-aar:7.8.0": {
            "insecure": True,
            "include": [
                "androidx.cardview:cardview",
                "androidx.recyclerview:recyclerview",
                "com.google.android.material:material",
            ],
        },
    },
    # Because these apply to all targets within a group, it's specified separately from the artifact list.
    dependency_target_substitutes = {
        # Because we rewrite dagger -> dagger_api (and make a wrapper target "dagger" that exports the dagger
        # annotation processor) we need to rewrite the internal dependencies inside the com/google/dagger package
        # to reflect this.
        # "groupId": { "full bazel target": "full alternate target" }
        "com.google.dagger": {"@maven//com/google/dagger:dagger": "@maven//com/google/dagger:dagger-api"},
    },
    jetifier_excludes = [
        "androidx.*:*",
        "javax.*:jsr250-api",
        "com.google.code.findbugs:jsr305",
        "com.google.errorprone:javac-shaded",
        "com.google.googlejavaformat:google-java-format",
        "com.google.truth:truth",
        "com.squareup:javapoet",
        "com.google.dagger:*",
        "javax.inject:javax.inject",
        "*:rxjava",
        "junit:junit",
        "org.jetbrains.kotlin*:*",
        # "*:*", # Don't use this, just set use_jetifier=False
        # "foo:foo*", # Artifacts must be literal or only the "*" wildcard. No partial matches.
        # "foo.*.bar:baz", # Groups may only have "startswith" style globbing.
        # "*.bar:baz",  # Groups may only have "startswith" style globbing.
    ],
    repository_urls = {
        "central": "https://repo1.maven.org/maven2",
        "google": "https://dl.google.com/dl/android/maven2",
    },
    use_jetifier = True,
    generate_rules_jvm_compatability_targets = True,
)

# Set up the standard android SDK repository, upon which depend a lot of the android tooling in bazel.
android_sdk_repository(
    name = "androidsdk",
    api_level = 29,
    build_tools_version = "29.0.3",
)
